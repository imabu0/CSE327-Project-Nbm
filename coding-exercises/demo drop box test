const express = require("express"); // Import Express framework
const multer = require("multer"); // Import Multer for handling file uploads
const axios = require("axios"); // Import Axios for making HTTP requests
const fs = require("fs"); // Import File System module for file operations

const app = express(); // Initialize Express app
const upload = multer({ dest: "uploads/" }); // Configure Multer to store uploads in 'uploads/' directory

// OneDrive API Credentials
const CLIENT_ID = process.env.CLIENT_ID; // Get OneDrive Client ID from environment variables
const CLIENT_SECRET = process.env.CLIENT_SECRET; // Get OneDrive Client Secret from environment variables
const REFRESH_TOKEN = process.env.REFRESH_TOKEN; // Get OneDrive Refresh Token from environment variables
const TENANT_ID = process.env.TENANT_ID; // Get OneDrive Tenant ID from environment variables

// Dropbox API Credentials
const DROPBOX_ACCESS_TOKEN = process.env.DROPBOX_ACCESS_TOKEN; // Get Dropbox Access Token from environment variables

/**
 * Get Microsoft OneDrive Access Token using refresh token
 */
const getOneDriveAccessToken = async () => {
    try {
        // Request a new access token from Microsoft OAuth endpoint
        const response = await axios.post(
            `https://login.microsoftonline.com/${TENANT_ID}/oauth2/v2.0/token`,
            new URLSearchParams({
                client_id: CLIENT_ID,
                client_secret: CLIENT_SECRET,
                refresh_token: REFRESH_TOKEN,
                grant_type: "refresh_token",
                scope: "Files.ReadWrite User.Read",
            })
        );
        return response.data.access_token; // Return the obtained access token
    } catch (error) {
        throw new Error(`Failed to get OneDrive access token: ${error.message}`); // Handle errors
    }
};

/**
 * Upload File to Microsoft OneDrive
 */
const uploadToOneDrive = async (filePath, fileName) => {
    try {
        const accessToken = await getOneDriveAccessToken(); // Get OneDrive access token
        const fileStream = fs.createReadStream(filePath); // Create file stream
        const uploadUrl = `https://graph.microsoft.com/v1.0/me/drive/root:/${fileName}:/content`; // Define OneDrive upload URL

        const response = await axios.put(uploadUrl, fileStream, {
            headers: {
                Authorization: `Bearer ${accessToken}`, // Set authorization header
                "Content-Type": "application/octet-stream", // Set content type
            },
        });
        
        return { success: true, link: response.data.webUrl }; // Return success response
    } catch (error) {
        return { success: false, error: error.response?.data || error.message }; // Handle errors
    }
};

/**
 * Upload File to Dropbox
 */
const uploadToDropbox = async (filePath, fileName) => {
    try {
        const fileContent = fs.readFileSync(filePath); // Read file content
        const dropboxUploadUrl = "https://content.dropboxapi.com/2/files/upload"; // Define Dropbox upload URL

        const response = await axios.post(dropboxUploadUrl, fileContent, {
            headers: {
                Authorization: `Bearer ${DROPBOX_ACCESS_TOKEN}`, // Set authorization header
                "Content-Type": "application/octet-stream", // Set content type
                "Dropbox-API-Arg": JSON.stringify({ // Define Dropbox API arguments
                    path: `/${fileName}`,
                    mode: "add",
                    autorename: true,
                    mute: false
                }),
            }
        });
        
        return { success: true, link: `https://www.dropbox.com/home${response.data.path_display}` }; // Return success response
    } catch (error) {
        return { success: false, error: error.response?.data || error.message }; // Handle errors
    }
};

/**
 * File Upload API (User Chooses OneDrive or Dropbox)
 */
app.post("/upload", upload.single("file"), async (req, res) => {
    try {
        const file = req.file; // Get uploaded file
        const { storage } = req.body; // Get storage option from request body
        
        if (!file) {
            return res.status(400).json({ error: "No file uploaded." }); // Handle missing file
        }
        
        if (!storage || (storage !== "onedrive" && storage !== "dropbox")) {
            return res.status(400).json({ error: "Invalid storage option. Use 'onedrive' or 'dropbox'." }); // Handle invalid storage option
        }
        
        let result;
        if (storage === "onedrive") {
            result = await uploadToOneDrive(file.path, file.originalname); // Upload to OneDrive
        } else {
            result = await uploadToDropbox(file.path, file.originalname); // Upload to Dropbox
        }

        fs.unlinkSync(file.path); // Delete file after upload
        
        if (result.success) {
            res.json({ message: "File uploaded successfully", link: result.link }); // Send success response
        } else {
            res.status(500).json({ error: result.error }); // Send error response
        }
    } catch (error) {
        res.status(500).json({ error: error.message }); // Handle errors
    }
});

/**
 * Start the Server
 */
const PORT = 5000; // Define server port
app.listen(PORT, () => console.log(`ğŸš€ Server running on port ${PORT}`)); // Start Express server
